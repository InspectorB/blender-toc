/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data_types.h"

#include <algorithm>

namespace wire { namespace data {

const char* NoData::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t NoData::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t NoData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoData");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoData &a, NoData &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* SessionStart::ascii_fingerprint = "156EF29B76E759BBEFED8A8D03EDB600";
const uint8_t SessionStart::binary_fingerprint[16] = {0x15,0x6E,0xF2,0x9B,0x76,0xE7,0x59,0xBB,0xEF,0xED,0x8A,0x8D,0x03,0xED,0xB6,0x00};

uint32_t SessionStart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->properties[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->blender_version);
          this->__isset.blender_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->blender_subversion);
          this->__isset.blender_subversion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os_version);
          this->__isset.os_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->resolution_x);
          this->__isset.resolution_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->resolution_y);
          this->__isset.resolution_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gui);
          this->__isset.gui = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SessionStart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SessionStart");

  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter7;
      for (_iter7 = this->properties.begin(); _iter7 != this->properties.end(); ++_iter7)
      {
        xfer += oprot->writeString(_iter7->first);
        xfer += oprot->writeString(_iter7->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blender_version) {
    xfer += oprot->writeFieldBegin("blender_version", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->blender_version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blender_subversion) {
    xfer += oprot->writeFieldBegin("blender_subversion", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->blender_subversion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.os) {
    xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->os);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.os_version) {
    xfer += oprot->writeFieldBegin("os_version", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->os_version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolution_x) {
    xfer += oprot->writeFieldBegin("resolution_x", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->resolution_x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolution_y) {
    xfer += oprot->writeFieldBegin("resolution_y", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->resolution_y);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gui) {
    xfer += oprot->writeFieldBegin("gui", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->gui);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SessionStart &a, SessionStart &b) {
  using ::std::swap;
  swap(a.properties, b.properties);
  swap(a.blender_version, b.blender_version);
  swap(a.blender_subversion, b.blender_subversion);
  swap(a.os, b.os);
  swap(a.os_version, b.os_version);
  swap(a.resolution_x, b.resolution_x);
  swap(a.resolution_y, b.resolution_y);
  swap(a.gui, b.gui);
  swap(a.__isset, b.__isset);
}

const char* RNAPropertyData::ascii_fingerprint = "EB13F12900F9242F2C7663FCDE00EC35";
const uint8_t RNAPropertyData::binary_fingerprint[16] = {0xEB,0x13,0xF1,0x29,0x00,0xF9,0x24,0x2F,0x2C,0x76,0x63,0xFC,0xDE,0x00,0xEC,0x35};

uint32_t RNAPropertyData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->valueBoolean);
          this->__isset.valueBoolean = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listBoolean.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->listBoolean.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readBool(this->listBoolean[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listBoolean = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->valueInt);
          this->__isset.valueInt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listInt.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->listInt.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += iprot->readI32(this->listInt[_i17]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listInt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->valueDouble);
          this->__isset.valueDouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listDouble.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->listDouble.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readDouble(this->listDouble[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listDouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->valueString);
          this->__isset.valueString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->valueEnum);
          this->__isset.valueEnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->listEnum.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readSetBegin(_etype26, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _elem28;
              xfer += iprot->readString(_elem28);
              this->listEnum.insert(_elem28);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.listEnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->valuePointer);
          this->__isset.valuePointer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->collection.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->collection.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readString(this->collection[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.collection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RNAPropertyData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RNAPropertyData");

  if (this->__isset.valueBoolean) {
    xfer += oprot->writeFieldBegin("valueBoolean", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->valueBoolean);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listBoolean) {
    xfer += oprot->writeFieldBegin("listBoolean", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->listBoolean.size()));
      std::vector<bool> ::const_iterator _iter34;
      for (_iter34 = this->listBoolean.begin(); _iter34 != this->listBoolean.end(); ++_iter34)
      {
        xfer += oprot->writeBool((*_iter34));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.valueInt) {
    xfer += oprot->writeFieldBegin("valueInt", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->valueInt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listInt) {
    xfer += oprot->writeFieldBegin("listInt", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->listInt.size()));
      std::vector<int32_t> ::const_iterator _iter35;
      for (_iter35 = this->listInt.begin(); _iter35 != this->listInt.end(); ++_iter35)
      {
        xfer += oprot->writeI32((*_iter35));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.valueDouble) {
    xfer += oprot->writeFieldBegin("valueDouble", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->valueDouble);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listDouble) {
    xfer += oprot->writeFieldBegin("listDouble", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->listDouble.size()));
      std::vector<double> ::const_iterator _iter36;
      for (_iter36 = this->listDouble.begin(); _iter36 != this->listDouble.end(); ++_iter36)
      {
        xfer += oprot->writeDouble((*_iter36));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.valueString) {
    xfer += oprot->writeFieldBegin("valueString", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->valueString);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.valueEnum) {
    xfer += oprot->writeFieldBegin("valueEnum", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->valueEnum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listEnum) {
    xfer += oprot->writeFieldBegin("listEnum", ::apache::thrift::protocol::T_SET, 9);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->listEnum.size()));
      std::set<std::string> ::const_iterator _iter37;
      for (_iter37 = this->listEnum.begin(); _iter37 != this->listEnum.end(); ++_iter37)
      {
        xfer += oprot->writeString((*_iter37));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.valuePointer) {
    xfer += oprot->writeFieldBegin("valuePointer", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->valuePointer);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.collection) {
    xfer += oprot->writeFieldBegin("collection", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->collection.size()));
      std::vector<std::string> ::const_iterator _iter38;
      for (_iter38 = this->collection.begin(); _iter38 != this->collection.end(); ++_iter38)
      {
        xfer += oprot->writeString((*_iter38));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RNAPropertyData &a, RNAPropertyData &b) {
  using ::std::swap;
  swap(a.valueBoolean, b.valueBoolean);
  swap(a.listBoolean, b.listBoolean);
  swap(a.valueInt, b.valueInt);
  swap(a.listInt, b.listInt);
  swap(a.valueDouble, b.valueDouble);
  swap(a.listDouble, b.listDouble);
  swap(a.valueString, b.valueString);
  swap(a.valueEnum, b.valueEnum);
  swap(a.listEnum, b.listEnum);
  swap(a.valuePointer, b.valuePointer);
  swap(a.collection, b.collection);
  swap(a.__isset, b.__isset);
}

const char* RNAProperty::ascii_fingerprint = "765F2F039979508BE12A0AD81BFAEBA2";
const uint8_t RNAProperty::binary_fingerprint[16] = {0x76,0x5F,0x2F,0x03,0x99,0x79,0x50,0x8B,0xE1,0x2A,0x0A,0xD8,0x1B,0xFA,0xEB,0xA2};

uint32_t RNAProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identifier);
          this->__isset.identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RNAProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RNAProperty");

  if (this->__isset.identifier) {
    xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->identifier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.length) {
    xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->length);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RNAProperty &a, RNAProperty &b) {
  using ::std::swap;
  swap(a.identifier, b.identifier);
  swap(a.type, b.type);
  swap(a.length, b.length);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* WmOp::ascii_fingerprint = "E4328F54E79E0194622323D37317AAAC";
const uint8_t WmOp::binary_fingerprint[16] = {0xE4,0x32,0x8F,0x54,0xE7,0x9E,0x01,0x94,0x62,0x23,0x23,0xD3,0x73,0x17,0xAA,0xAC};

uint32_t WmOp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatorId);
          this->__isset.operatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->properties.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->properties.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->properties[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pythonRepresentation);
          this->__isset.pythonRepresentation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->screenshotHash);
          this->__isset.screenshotHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WmOp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WmOp");

  if (this->__isset.operatorId) {
    xfer += oprot->writeFieldBegin("operatorId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->operatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->properties.size()));
      std::vector<RNAProperty> ::const_iterator _iter44;
      for (_iter44 = this->properties.begin(); _iter44 != this->properties.end(); ++_iter44)
      {
        xfer += (*_iter44).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pythonRepresentation) {
    xfer += oprot->writeFieldBegin("pythonRepresentation", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->pythonRepresentation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.screenshotHash) {
    xfer += oprot->writeFieldBegin("screenshotHash", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->screenshotHash);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WmOp &a, WmOp &b) {
  using ::std::swap;
  swap(a.operatorId, b.operatorId);
  swap(a.properties, b.properties);
  swap(a.pythonRepresentation, b.pythonRepresentation);
  swap(a.screenshotHash, b.screenshotHash);
  swap(a.__isset, b.__isset);
}

const char* WmTabletData::ascii_fingerprint = "ED111A57916E19AA931FCB07344CD9A6";
const uint8_t WmTabletData::binary_fingerprint[16] = {0xED,0x11,0x1A,0x57,0x91,0x6E,0x19,0xAA,0x93,0x1F,0xCB,0x07,0x34,0x4C,0xD9,0xA6};

uint32_t WmTabletData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pressure);
          this->__isset.pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xtilt);
          this->__isset.xtilt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ytilt);
          this->__isset.ytilt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WmTabletData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WmTabletData");

  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pressure) {
    xfer += oprot->writeFieldBegin("pressure", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->pressure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.xtilt) {
    xfer += oprot->writeFieldBegin("xtilt", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->xtilt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ytilt) {
    xfer += oprot->writeFieldBegin("ytilt", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->ytilt);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WmTabletData &a, WmTabletData &b) {
  using ::std::swap;
  swap(a.active, b.active);
  swap(a.pressure, b.pressure);
  swap(a.xtilt, b.xtilt);
  swap(a.ytilt, b.ytilt);
  swap(a.__isset, b.__isset);
}

const char* WmEv::ascii_fingerprint = "2A2900F8FA20170DD20F40524CFF055F";
const uint8_t WmEv::binary_fingerprint[16] = {0x2A,0x29,0x00,0xF8,0xFA,0x20,0x17,0x0D,0xD2,0x0F,0x40,0x52,0x4C,0xFF,0x05,0x5F};

uint32_t WmEv::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mval1);
          this->__isset.mval1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mval2);
          this->__isset.mval2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->character);
          this->__isset.character = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->prevtype);
          this->__isset.prevtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->prevval);
          this->__isset.prevval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevx);
          this->__isset.prevx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevy);
          this->__isset.prevy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->prevclicktime);
          this->__isset.prevclicktime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevclickx);
          this->__isset.prevclickx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevclicky);
          this->__isset.prevclicky = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->shift);
          this->__isset.shift = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ctrl);
          this->__isset.ctrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->alt);
          this->__isset.alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->oskey);
          this->__isset.oskey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->keymodifier);
          this->__isset.keymodifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->check_click);
          this->__isset.check_click = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keymap_idname);
          this->__isset.keymap_idname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tablet_data.read(iprot);
          this->__isset.tablet_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WmEv::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WmEv");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 1);
    xfer += oprot->writeI16(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x) {
    xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y) {
    xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->y);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mval1) {
    xfer += oprot->writeFieldBegin("mval1", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->mval1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mval2) {
    xfer += oprot->writeFieldBegin("mval2", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->mval2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.character) {
    xfer += oprot->writeFieldBegin("character", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->character);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevtype) {
    xfer += oprot->writeFieldBegin("prevtype", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->prevtype);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevval) {
    xfer += oprot->writeFieldBegin("prevval", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->prevval);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevx) {
    xfer += oprot->writeFieldBegin("prevx", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->prevx);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevy) {
    xfer += oprot->writeFieldBegin("prevy", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->prevy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevclicktime) {
    xfer += oprot->writeFieldBegin("prevclicktime", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->prevclicktime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevclickx) {
    xfer += oprot->writeFieldBegin("prevclickx", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->prevclickx);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prevclicky) {
    xfer += oprot->writeFieldBegin("prevclicky", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->prevclicky);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shift) {
    xfer += oprot->writeFieldBegin("shift", ::apache::thrift::protocol::T_I16, 15);
    xfer += oprot->writeI16(this->shift);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ctrl) {
    xfer += oprot->writeFieldBegin("ctrl", ::apache::thrift::protocol::T_I16, 16);
    xfer += oprot->writeI16(this->ctrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alt) {
    xfer += oprot->writeFieldBegin("alt", ::apache::thrift::protocol::T_I16, 17);
    xfer += oprot->writeI16(this->alt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oskey) {
    xfer += oprot->writeFieldBegin("oskey", ::apache::thrift::protocol::T_I16, 18);
    xfer += oprot->writeI16(this->oskey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keymodifier) {
    xfer += oprot->writeFieldBegin("keymodifier", ::apache::thrift::protocol::T_I16, 19);
    xfer += oprot->writeI16(this->keymodifier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.check_click) {
    xfer += oprot->writeFieldBegin("check_click", ::apache::thrift::protocol::T_I16, 20);
    xfer += oprot->writeI16(this->check_click);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keymap_idname) {
    xfer += oprot->writeFieldBegin("keymap_idname", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->keymap_idname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tablet_data) {
    xfer += oprot->writeFieldBegin("tablet_data", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->tablet_data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WmEv &a, WmEv &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.mval1, b.mval1);
  swap(a.mval2, b.mval2);
  swap(a.character, b.character);
  swap(a.prevtype, b.prevtype);
  swap(a.prevval, b.prevval);
  swap(a.prevx, b.prevx);
  swap(a.prevy, b.prevy);
  swap(a.prevclicktime, b.prevclicktime);
  swap(a.prevclickx, b.prevclickx);
  swap(a.prevclicky, b.prevclicky);
  swap(a.shift, b.shift);
  swap(a.ctrl, b.ctrl);
  swap(a.alt, b.alt);
  swap(a.oskey, b.oskey);
  swap(a.keymodifier, b.keymodifier);
  swap(a.check_click, b.check_click);
  swap(a.keymap_idname, b.keymap_idname);
  swap(a.tablet_data, b.tablet_data);
  swap(a.__isset, b.__isset);
}

const char* Data::ascii_fingerprint = "3C4DE0632037F5614E215F39780096E2";
const uint8_t Data::binary_fingerprint[16] = {0x3C,0x4D,0xE0,0x63,0x20,0x37,0xF5,0x61,0x4E,0x21,0x5F,0x39,0x78,0x00,0x96,0xE2};

uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->noData.read(iprot);
          this->__isset.noData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sessionStart.read(iprot);
          this->__isset.sessionStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wmOp.read(iprot);
          this->__isset.wmOp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wmEv.read(iprot);
          this->__isset.wmEv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Data");

  if (this->__isset.noData) {
    xfer += oprot->writeFieldBegin("noData", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->noData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionStart) {
    xfer += oprot->writeFieldBegin("sessionStart", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->sessionStart.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wmOp) {
    xfer += oprot->writeFieldBegin("wmOp", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->wmOp.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wmEv) {
    xfer += oprot->writeFieldBegin("wmEv", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->wmEv.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.noData, b.noData);
  swap(a.sessionStart, b.sessionStart);
  swap(a.wmOp, b.wmOp);
  swap(a.wmEv, b.wmEv);
  swap(a.__isset, b.__isset);
}

}} // namespace
