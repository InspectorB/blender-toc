/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WanderService_H
#define WanderService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"

namespace wire {

class WanderServiceIf {
 public:
  virtual ~WanderServiceIf() {}
  virtual void ping() = 0;
  virtual void getNextMessage(HeaderAndMessage& _return) = 0;
  virtual void getPreviousMessage(HeaderAndMessage& _return) = 0;
  virtual void getWmOpScreenshotURL(std::string& _return, const int64_t user, const int64_t timestamp, const std::string& hash) = 0;
  virtual void getFiles(Files& _return) = 0;
};

class WanderServiceIfFactory {
 public:
  typedef WanderServiceIf Handler;

  virtual ~WanderServiceIfFactory() {}

  virtual WanderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WanderServiceIf* /* handler */) = 0;
};

class WanderServiceIfSingletonFactory : virtual public WanderServiceIfFactory {
 public:
  WanderServiceIfSingletonFactory(const boost::shared_ptr<WanderServiceIf>& iface) : iface_(iface) {}
  virtual ~WanderServiceIfSingletonFactory() {}

  virtual WanderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WanderServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<WanderServiceIf> iface_;
};

class WanderServiceNull : virtual public WanderServiceIf {
 public:
  virtual ~WanderServiceNull() {}
  void ping() {
    return;
  }
  void getNextMessage(HeaderAndMessage& /* _return */) {
    return;
  }
  void getPreviousMessage(HeaderAndMessage& /* _return */) {
    return;
  }
  void getWmOpScreenshotURL(std::string& /* _return */, const int64_t /* user */, const int64_t /* timestamp */, const std::string& /* hash */) {
    return;
  }
  void getFiles(Files& /* _return */) {
    return;
  }
};


class WanderService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WanderService_ping_args() {
  }

  virtual ~WanderService_ping_args() throw() {}


  bool operator == (const WanderService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WanderService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WanderService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WanderService_ping_result() {
  }

  virtual ~WanderService_ping_result() throw() {}


  bool operator == (const WanderService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WanderService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WanderService_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WanderService_getNextMessage_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WanderService_getNextMessage_args() {
  }

  virtual ~WanderService_getNextMessage_args() throw() {}


  bool operator == (const WanderService_getNextMessage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WanderService_getNextMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getNextMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_getNextMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WanderService_getNextMessage_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getNextMessage_result__isset {
  _WanderService_getNextMessage_result__isset() : success(false), noMoreMessages(false) {}
  bool success;
  bool noMoreMessages;
} _WanderService_getNextMessage_result__isset;

class WanderService_getNextMessage_result {
 public:

  static const char* ascii_fingerprint; // = "0214B2D050F7E37254BFEDCA46AA00BB";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x14,0xB2,0xD0,0x50,0xF7,0xE3,0x72,0x54,0xBF,0xED,0xCA,0x46,0xAA,0x00,0xBB};

  WanderService_getNextMessage_result() {
  }

  virtual ~WanderService_getNextMessage_result() throw() {}

  HeaderAndMessage success;
  NoMoreMessages noMoreMessages;

  _WanderService_getNextMessage_result__isset __isset;

  void __set_success(const HeaderAndMessage& val) {
    success = val;
    __isset.success = true;
  }

  void __set_noMoreMessages(const NoMoreMessages& val) {
    noMoreMessages = val;
    __isset.noMoreMessages = true;
  }

  bool operator == (const WanderService_getNextMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(noMoreMessages == rhs.noMoreMessages))
      return false;
    return true;
  }
  bool operator != (const WanderService_getNextMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getNextMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getNextMessage_presult__isset {
  _WanderService_getNextMessage_presult__isset() : success(false), noMoreMessages(false) {}
  bool success;
  bool noMoreMessages;
} _WanderService_getNextMessage_presult__isset;

class WanderService_getNextMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "0214B2D050F7E37254BFEDCA46AA00BB";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x14,0xB2,0xD0,0x50,0xF7,0xE3,0x72,0x54,0xBF,0xED,0xCA,0x46,0xAA,0x00,0xBB};


  virtual ~WanderService_getNextMessage_presult() throw() {}

  HeaderAndMessage* success;
  NoMoreMessages noMoreMessages;

  _WanderService_getNextMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WanderService_getPreviousMessage_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WanderService_getPreviousMessage_args() {
  }

  virtual ~WanderService_getPreviousMessage_args() throw() {}


  bool operator == (const WanderService_getPreviousMessage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WanderService_getPreviousMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getPreviousMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_getPreviousMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WanderService_getPreviousMessage_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getPreviousMessage_result__isset {
  _WanderService_getPreviousMessage_result__isset() : success(false), noMoreMessages(false) {}
  bool success;
  bool noMoreMessages;
} _WanderService_getPreviousMessage_result__isset;

class WanderService_getPreviousMessage_result {
 public:

  static const char* ascii_fingerprint; // = "0214B2D050F7E37254BFEDCA46AA00BB";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x14,0xB2,0xD0,0x50,0xF7,0xE3,0x72,0x54,0xBF,0xED,0xCA,0x46,0xAA,0x00,0xBB};

  WanderService_getPreviousMessage_result() {
  }

  virtual ~WanderService_getPreviousMessage_result() throw() {}

  HeaderAndMessage success;
  NoMoreMessages noMoreMessages;

  _WanderService_getPreviousMessage_result__isset __isset;

  void __set_success(const HeaderAndMessage& val) {
    success = val;
    __isset.success = true;
  }

  void __set_noMoreMessages(const NoMoreMessages& val) {
    noMoreMessages = val;
    __isset.noMoreMessages = true;
  }

  bool operator == (const WanderService_getPreviousMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(noMoreMessages == rhs.noMoreMessages))
      return false;
    return true;
  }
  bool operator != (const WanderService_getPreviousMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getPreviousMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getPreviousMessage_presult__isset {
  _WanderService_getPreviousMessage_presult__isset() : success(false), noMoreMessages(false) {}
  bool success;
  bool noMoreMessages;
} _WanderService_getPreviousMessage_presult__isset;

class WanderService_getPreviousMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "0214B2D050F7E37254BFEDCA46AA00BB";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x14,0xB2,0xD0,0x50,0xF7,0xE3,0x72,0x54,0xBF,0xED,0xCA,0x46,0xAA,0x00,0xBB};


  virtual ~WanderService_getPreviousMessage_presult() throw() {}

  HeaderAndMessage* success;
  NoMoreMessages noMoreMessages;

  _WanderService_getPreviousMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WanderService_getWmOpScreenshotURL_args__isset {
  _WanderService_getWmOpScreenshotURL_args__isset() : user(false), timestamp(false), hash(false) {}
  bool user;
  bool timestamp;
  bool hash;
} _WanderService_getWmOpScreenshotURL_args__isset;

class WanderService_getWmOpScreenshotURL_args {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  WanderService_getWmOpScreenshotURL_args() : user(0), timestamp(0), hash() {
  }

  virtual ~WanderService_getWmOpScreenshotURL_args() throw() {}

  int64_t user;
  int64_t timestamp;
  std::string hash;

  _WanderService_getWmOpScreenshotURL_args__isset __isset;

  void __set_user(const int64_t val) {
    user = val;
    __isset.user = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_hash(const std::string& val) {
    hash = val;
    __isset.hash = true;
  }

  bool operator == (const WanderService_getWmOpScreenshotURL_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(hash == rhs.hash))
      return false;
    return true;
  }
  bool operator != (const WanderService_getWmOpScreenshotURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getWmOpScreenshotURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_getWmOpScreenshotURL_pargs {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};


  virtual ~WanderService_getWmOpScreenshotURL_pargs() throw() {}

  const int64_t* user;
  const int64_t* timestamp;
  const std::string* hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getWmOpScreenshotURL_result__isset {
  _WanderService_getWmOpScreenshotURL_result__isset() : success(false) {}
  bool success;
} _WanderService_getWmOpScreenshotURL_result__isset;

class WanderService_getWmOpScreenshotURL_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  WanderService_getWmOpScreenshotURL_result() : success() {
  }

  virtual ~WanderService_getWmOpScreenshotURL_result() throw() {}

  std::string success;

  _WanderService_getWmOpScreenshotURL_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const WanderService_getWmOpScreenshotURL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WanderService_getWmOpScreenshotURL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getWmOpScreenshotURL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getWmOpScreenshotURL_presult__isset {
  _WanderService_getWmOpScreenshotURL_presult__isset() : success(false) {}
  bool success;
} _WanderService_getWmOpScreenshotURL_presult__isset;

class WanderService_getWmOpScreenshotURL_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~WanderService_getWmOpScreenshotURL_presult() throw() {}

  std::string* success;

  _WanderService_getWmOpScreenshotURL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WanderService_getFiles_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WanderService_getFiles_args() {
  }

  virtual ~WanderService_getFiles_args() throw() {}


  bool operator == (const WanderService_getFiles_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WanderService_getFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WanderService_getFiles_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WanderService_getFiles_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getFiles_result__isset {
  _WanderService_getFiles_result__isset() : success(false) {}
  bool success;
} _WanderService_getFiles_result__isset;

class WanderService_getFiles_result {
 public:

  static const char* ascii_fingerprint; // = "1BA53E9B5C7B95656D5F4B1832D0CD3F";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xA5,0x3E,0x9B,0x5C,0x7B,0x95,0x65,0x6D,0x5F,0x4B,0x18,0x32,0xD0,0xCD,0x3F};

  WanderService_getFiles_result() {
  }

  virtual ~WanderService_getFiles_result() throw() {}

  Files success;

  _WanderService_getFiles_result__isset __isset;

  void __set_success(const Files& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const WanderService_getFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WanderService_getFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WanderService_getFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WanderService_getFiles_presult__isset {
  _WanderService_getFiles_presult__isset() : success(false) {}
  bool success;
} _WanderService_getFiles_presult__isset;

class WanderService_getFiles_presult {
 public:

  static const char* ascii_fingerprint; // = "1BA53E9B5C7B95656D5F4B1832D0CD3F";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xA5,0x3E,0x9B,0x5C,0x7B,0x95,0x65,0x6D,0x5F,0x4B,0x18,0x32,0xD0,0xCD,0x3F};


  virtual ~WanderService_getFiles_presult() throw() {}

  Files* success;

  _WanderService_getFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WanderServiceClient : virtual public WanderServiceIf {
 public:
  WanderServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WanderServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void getNextMessage(HeaderAndMessage& _return);
  void send_getNextMessage();
  void recv_getNextMessage(HeaderAndMessage& _return);
  void getPreviousMessage(HeaderAndMessage& _return);
  void send_getPreviousMessage();
  void recv_getPreviousMessage(HeaderAndMessage& _return);
  void getWmOpScreenshotURL(std::string& _return, const int64_t user, const int64_t timestamp, const std::string& hash);
  void send_getWmOpScreenshotURL(const int64_t user, const int64_t timestamp, const std::string& hash);
  void recv_getWmOpScreenshotURL(std::string& _return);
  void getFiles(Files& _return);
  void send_getFiles();
  void recv_getFiles(Files& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WanderServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WanderServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WanderServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPreviousMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWmOpScreenshotURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WanderServiceProcessor(boost::shared_ptr<WanderServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &WanderServiceProcessor::process_ping;
    processMap_["getNextMessage"] = &WanderServiceProcessor::process_getNextMessage;
    processMap_["getPreviousMessage"] = &WanderServiceProcessor::process_getPreviousMessage;
    processMap_["getWmOpScreenshotURL"] = &WanderServiceProcessor::process_getWmOpScreenshotURL;
    processMap_["getFiles"] = &WanderServiceProcessor::process_getFiles;
  }

  virtual ~WanderServiceProcessor() {}
};

class WanderServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WanderServiceProcessorFactory(const ::boost::shared_ptr< WanderServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WanderServiceIfFactory > handlerFactory_;
};

class WanderServiceMultiface : virtual public WanderServiceIf {
 public:
  WanderServiceMultiface(std::vector<boost::shared_ptr<WanderServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WanderServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WanderServiceIf> > ifaces_;
  WanderServiceMultiface() {}
  void add(boost::shared_ptr<WanderServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void getNextMessage(HeaderAndMessage& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextMessage(_return);
    }
    ifaces_[i]->getNextMessage(_return);
    return;
  }

  void getPreviousMessage(HeaderAndMessage& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreviousMessage(_return);
    }
    ifaces_[i]->getPreviousMessage(_return);
    return;
  }

  void getWmOpScreenshotURL(std::string& _return, const int64_t user, const int64_t timestamp, const std::string& hash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWmOpScreenshotURL(_return, user, timestamp, hash);
    }
    ifaces_[i]->getWmOpScreenshotURL(_return, user, timestamp, hash);
    return;
  }

  void getFiles(Files& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFiles(_return);
    }
    ifaces_[i]->getFiles(_return);
    return;
  }

};

} // namespace

#endif
