/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_TYPES_H
#define message_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "data_types.h"
#include "metadata_types.h"


namespace wire {

typedef struct _Message__isset {
  _Message__isset() : metadata(false), data(false), user(false), timestamp(false), token(false) {}
  bool metadata;
  bool data;
  bool user;
  bool timestamp;
  bool token;
} _Message__isset;

class Message {
 public:

  static const char* ascii_fingerprint; // = "93E5CB1117316436F2D4F9E5B431A82E";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xE5,0xCB,0x11,0x17,0x31,0x64,0x36,0xF2,0xD4,0xF9,0xE5,0xB4,0x31,0xA8,0x2E};

  Message() : user(0), timestamp(0), token() {
  }

  virtual ~Message() throw() {}

   ::wire::metadata::Metadata metadata;
   ::wire::data::Data data;
  int64_t user;
  int64_t timestamp;
  std::string token;

  _Message__isset __isset;

  void __set_metadata(const  ::wire::metadata::Metadata& val) {
    metadata = val;
    __isset.metadata = true;
  }

  void __set_data(const  ::wire::data::Data& val) {
    data = val;
    __isset.data = true;
  }

  void __set_user(const int64_t val) {
    user = val;
    __isset.user = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  bool operator == (const Message & rhs) const
  {
    if (__isset.metadata != rhs.__isset.metadata)
      return false;
    else if (__isset.metadata && !(metadata == rhs.metadata))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);

} // namespace

#endif
