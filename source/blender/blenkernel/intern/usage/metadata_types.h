/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef metadata_TYPES_H
#define metadata_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace wire { namespace metadata {


class NoMetadata {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  NoMetadata() {
  }

  virtual ~NoMetadata() throw() {}


  bool operator == (const NoMetadata & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NoMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NoMetadata &a, NoMetadata &b);

typedef struct _OnlyUser__isset {
  _OnlyUser__isset() : user(false) {}
  bool user;
} _OnlyUser__isset;

class OnlyUser {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  OnlyUser() : user(0) {
  }

  virtual ~OnlyUser() throw() {}

  int64_t user;

  _OnlyUser__isset __isset;

  void __set_user(const int64_t val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const OnlyUser & rhs) const
  {
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const OnlyUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlyUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OnlyUser &a, OnlyUser &b);

typedef struct _SessionKey__isset {
  _SessionKey__isset() : sessionKey(false) {}
  bool sessionKey;
} _SessionKey__isset;

class SessionKey {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  SessionKey() : sessionKey() {
  }

  virtual ~SessionKey() throw() {}

  std::string sessionKey;

  _SessionKey__isset __isset;

  void __set_sessionKey(const std::string& val) {
    sessionKey = val;
    __isset.sessionKey = true;
  }

  bool operator == (const SessionKey & rhs) const
  {
    if (__isset.sessionKey != rhs.__isset.sessionKey)
      return false;
    else if (__isset.sessionKey && !(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const SessionKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionKey &a, SessionKey &b);

typedef struct _Metadata__isset {
  _Metadata__isset() : noMetadata(false), onlyUser(false), sessionKey(false) {}
  bool noMetadata;
  bool onlyUser;
  bool sessionKey;
} _Metadata__isset;

class Metadata {
 public:

  static const char* ascii_fingerprint; // = "BC6E462F30B0AE22ED9A244AB3806973";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x6E,0x46,0x2F,0x30,0xB0,0xAE,0x22,0xED,0x9A,0x24,0x4A,0xB3,0x80,0x69,0x73};

  Metadata() {
  }

  virtual ~Metadata() throw() {}

  NoMetadata noMetadata;
  OnlyUser onlyUser;
  SessionKey sessionKey;

  _Metadata__isset __isset;

  void __set_noMetadata(const NoMetadata& val) {
    noMetadata = val;
    __isset = _Metadata__isset();
    __isset.noMetadata = true;
  }

  void __set_onlyUser(const OnlyUser& val) {
    onlyUser = val;
    __isset = _Metadata__isset();
    __isset.onlyUser = true;
  }

  void __set_sessionKey(const SessionKey& val) {
    sessionKey = val;
    __isset = _Metadata__isset();
    __isset.sessionKey = true;
  }

  bool operator == (const Metadata & rhs) const
  {
    if (__isset.noMetadata != rhs.__isset.noMetadata)
      return false;
    else if (__isset.noMetadata && !(noMetadata == rhs.noMetadata))
      return false;
    if (__isset.onlyUser != rhs.__isset.onlyUser)
      return false;
    else if (__isset.onlyUser && !(onlyUser == rhs.onlyUser))
      return false;
    if (__isset.sessionKey != rhs.__isset.sessionKey)
      return false;
    else if (__isset.sessionKey && !(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const Metadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Metadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Metadata &a, Metadata &b);

}} // namespace

#endif
