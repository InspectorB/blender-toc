/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "message_types.h"


namespace wire {

typedef struct _Unavailable__isset {
  _Unavailable__isset() : message(false) {}
  bool message;
} _Unavailable__isset;

class Unavailable : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Unavailable() : message() {
  }

  virtual ~Unavailable() throw() {}

  std::string message;

  _Unavailable__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const Unavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Unavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Unavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Unavailable &a, Unavailable &b);

typedef struct _UnknownToken__isset {
  _UnknownToken__isset() : message(false) {}
  bool message;
} _UnknownToken__isset;

class UnknownToken : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UnknownToken() : message() {
  }

  virtual ~UnknownToken() throw() {}

  std::string message;

  _UnknownToken__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const UnknownToken & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnknownToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnknownToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnknownToken &a, UnknownToken &b);

typedef struct _IncorrectlyFormattedMessage__isset {
  _IncorrectlyFormattedMessage__isset() : message(false) {}
  bool message;
} _IncorrectlyFormattedMessage__isset;

class IncorrectlyFormattedMessage : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IncorrectlyFormattedMessage() : message() {
  }

  virtual ~IncorrectlyFormattedMessage() throw() {}

  std::string message;

  _IncorrectlyFormattedMessage__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const IncorrectlyFormattedMessage & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IncorrectlyFormattedMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncorrectlyFormattedMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IncorrectlyFormattedMessage &a, IncorrectlyFormattedMessage &b);

} // namespace

#endif
