/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "data_types.h"
#include "metadata_types.h"


namespace wire {

typedef struct _Message__isset {
  _Message__isset() : metadata(false), data(false), user(false), timestamp(false), token(false) {}
  bool metadata;
  bool data;
  bool user;
  bool timestamp;
  bool token;
} _Message__isset;

class Message {
 public:

  static const char* ascii_fingerprint; // = "E73E89F7689E021E65F450EAE558E413";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x3E,0x89,0xF7,0x68,0x9E,0x02,0x1E,0x65,0xF4,0x50,0xEA,0xE5,0x58,0xE4,0x13};

  Message() : user(0), timestamp(0), token() {
  }

  virtual ~Message() throw() {}

   ::wire::metadata::Metadata metadata;
   ::wire::data::Data data;
  int64_t user;
  int64_t timestamp;
  std::string token;

  _Message__isset __isset;

  void __set_metadata(const  ::wire::metadata::Metadata& val) {
    metadata = val;
    __isset.metadata = true;
  }

  void __set_data(const  ::wire::data::Data& val) {
    data = val;
    __isset.data = true;
  }

  void __set_user(const int64_t val) {
    user = val;
    __isset.user = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  bool operator == (const Message & rhs) const
  {
    if (__isset.metadata != rhs.__isset.metadata)
      return false;
    else if (__isset.metadata && !(metadata == rhs.metadata))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);

typedef struct _Screenshot__isset {
  _Screenshot__isset() : token(false), hash(false), screenshot(false), timestamp(false), subdivisions(false) {}
  bool token;
  bool hash;
  bool screenshot;
  bool timestamp;
  bool subdivisions;
} _Screenshot__isset;

class Screenshot {
 public:

  static const char* ascii_fingerprint; // = "EC500A9237B8225E8EEAAA066785F02E";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x50,0x0A,0x92,0x37,0xB8,0x22,0x5E,0x8E,0xEA,0xAA,0x06,0x67,0x85,0xF0,0x2E};

  Screenshot() : token(), hash(), screenshot(), timestamp(0), subdivisions(0) {
  }

  virtual ~Screenshot() throw() {}

  std::string token;
  std::string hash;
  std::string screenshot;
  int64_t timestamp;
  int16_t subdivisions;

  _Screenshot__isset __isset;

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  void __set_hash(const std::string& val) {
    hash = val;
    __isset.hash = true;
  }

  void __set_screenshot(const std::string& val) {
    screenshot = val;
    __isset.screenshot = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_subdivisions(const int16_t val) {
    subdivisions = val;
    __isset.subdivisions = true;
  }

  bool operator == (const Screenshot & rhs) const
  {
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.hash != rhs.__isset.hash)
      return false;
    else if (__isset.hash && !(hash == rhs.hash))
      return false;
    if (__isset.screenshot != rhs.__isset.screenshot)
      return false;
    else if (__isset.screenshot && !(screenshot == rhs.screenshot))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.subdivisions != rhs.__isset.subdivisions)
      return false;
    else if (__isset.subdivisions && !(subdivisions == rhs.subdivisions))
      return false;
    return true;
  }
  bool operator != (const Screenshot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Screenshot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Screenshot &a, Screenshot &b);

typedef struct _Unavailable__isset {
  _Unavailable__isset() : message(false) {}
  bool message;
} _Unavailable__isset;

class Unavailable : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Unavailable() : message() {
  }

  virtual ~Unavailable() throw() {}

  std::string message;

  _Unavailable__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const Unavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Unavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Unavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Unavailable &a, Unavailable &b);

typedef struct _UnknownToken__isset {
  _UnknownToken__isset() : message(false) {}
  bool message;
} _UnknownToken__isset;

class UnknownToken : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UnknownToken() : message() {
  }

  virtual ~UnknownToken() throw() {}

  std::string message;

  _UnknownToken__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const UnknownToken & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnknownToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnknownToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnknownToken &a, UnknownToken &b);

typedef struct _IncorrectlyFormattedMessage__isset {
  _IncorrectlyFormattedMessage__isset() : message(false) {}
  bool message;
} _IncorrectlyFormattedMessage__isset;

class IncorrectlyFormattedMessage : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IncorrectlyFormattedMessage() : message() {
  }

  virtual ~IncorrectlyFormattedMessage() throw() {}

  std::string message;

  _IncorrectlyFormattedMessage__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const IncorrectlyFormattedMessage & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IncorrectlyFormattedMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncorrectlyFormattedMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IncorrectlyFormattedMessage &a, IncorrectlyFormattedMessage &b);

typedef struct _ScreenshotHashNotUnique__isset {
  _ScreenshotHashNotUnique__isset() : message(false) {}
  bool message;
} _ScreenshotHashNotUnique__isset;

class ScreenshotHashNotUnique : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ScreenshotHashNotUnique() : message() {
  }

  virtual ~ScreenshotHashNotUnique() throw() {}

  std::string message;

  _ScreenshotHashNotUnique__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const ScreenshotHashNotUnique & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ScreenshotHashNotUnique &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScreenshotHashNotUnique & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScreenshotHashNotUnique &a, ScreenshotHashNotUnique &b);

typedef struct _Header__isset {
  _Header__isset() : timestampServer(false), timestampClient(false), user(false) {}
  bool timestampServer;
  bool timestampClient;
  bool user;
} _Header__isset;

class Header {
 public:

  static const char* ascii_fingerprint; // = "6952BA042A8F8C3F826B0B8BA3E58440";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x52,0xBA,0x04,0x2A,0x8F,0x8C,0x3F,0x82,0x6B,0x0B,0x8B,0xA3,0xE5,0x84,0x40};

  Header() : timestampServer(0), timestampClient(0), user(0) {
  }

  virtual ~Header() throw() {}

  int64_t timestampServer;
  int64_t timestampClient;
  int64_t user;

  _Header__isset __isset;

  void __set_timestampServer(const int64_t val) {
    timestampServer = val;
    __isset.timestampServer = true;
  }

  void __set_timestampClient(const int64_t val) {
    timestampClient = val;
    __isset.timestampClient = true;
  }

  void __set_user(const int64_t val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const Header & rhs) const
  {
    if (__isset.timestampServer != rhs.__isset.timestampServer)
      return false;
    else if (__isset.timestampServer && !(timestampServer == rhs.timestampServer))
      return false;
    if (__isset.timestampClient != rhs.__isset.timestampClient)
      return false;
    else if (__isset.timestampClient && !(timestampClient == rhs.timestampClient))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Header &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Header & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Header &a, Header &b);

typedef struct _File__isset {
  _File__isset() : name(false), lastModified(false), relativePath(false) {}
  bool name;
  bool lastModified;
  bool relativePath;
} _File__isset;

class File {
 public:

  static const char* ascii_fingerprint; // = "5EA4ECD30CE8B7CE72112C7A7FA85C6F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA4,0xEC,0xD3,0x0C,0xE8,0xB7,0xCE,0x72,0x11,0x2C,0x7A,0x7F,0xA8,0x5C,0x6F};

  File() : name(), lastModified(0), relativePath() {
  }

  virtual ~File() throw() {}

  std::string name;
  int64_t lastModified;
  std::string relativePath;

  _File__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_lastModified(const int64_t val) {
    lastModified = val;
    __isset.lastModified = true;
  }

  void __set_relativePath(const std::string& val) {
    relativePath = val;
    __isset.relativePath = true;
  }

  bool operator == (const File & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.lastModified != rhs.__isset.lastModified)
      return false;
    else if (__isset.lastModified && !(lastModified == rhs.lastModified))
      return false;
    if (__isset.relativePath != rhs.__isset.relativePath)
      return false;
    else if (__isset.relativePath && !(relativePath == rhs.relativePath))
      return false;
    return true;
  }
  bool operator != (const File &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const File & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(File &a, File &b);

typedef struct _Files__isset {
  _Files__isset() : files(false) {}
  bool files;
} _Files__isset;

class Files {
 public:

  static const char* ascii_fingerprint; // = "D9918F996B837C1DA7A9415E92AFD174";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x91,0x8F,0x99,0x6B,0x83,0x7C,0x1D,0xA7,0xA9,0x41,0x5E,0x92,0xAF,0xD1,0x74};

  Files() {
  }

  virtual ~Files() throw() {}

  std::vector<File>  files;

  _Files__isset __isset;

  void __set_files(const std::vector<File> & val) {
    files = val;
    __isset.files = true;
  }

  bool operator == (const Files & rhs) const
  {
    if (__isset.files != rhs.__isset.files)
      return false;
    else if (__isset.files && !(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const Files &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Files & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Files &a, Files &b);

typedef struct _HeaderAndMessage__isset {
  _HeaderAndMessage__isset() : header(false), message(false) {}
  bool header;
  bool message;
} _HeaderAndMessage__isset;

class HeaderAndMessage {
 public:

  static const char* ascii_fingerprint; // = "21B71D753E3A23F2B603B67D23386C1A";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xB7,0x1D,0x75,0x3E,0x3A,0x23,0xF2,0xB6,0x03,0xB6,0x7D,0x23,0x38,0x6C,0x1A};

  HeaderAndMessage() {
  }

  virtual ~HeaderAndMessage() throw() {}

  Header header;
  Message message;

  _HeaderAndMessage__isset __isset;

  void __set_header(const Header& val) {
    header = val;
    __isset.header = true;
  }

  void __set_message(const Message& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const HeaderAndMessage & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const HeaderAndMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeaderAndMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeaderAndMessage &a, HeaderAndMessage &b);


class NoMoreMessages : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  NoMoreMessages() {
  }

  virtual ~NoMoreMessages() throw() {}


  bool operator == (const NoMoreMessages & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NoMoreMessages &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoMoreMessages & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NoMoreMessages &a, NoMoreMessages &b);

} // namespace

#endif
